# C2C MVP Application Configuration
# Docker Compose 환경 기준 설정

server:
  port: 8080

spring:
  application:
    name: c2c-mvp
  
  thymeleaf:
    cache: false     # 템플릿 즉시 반영
  devtools:
    livereload:
      enabled: true  # 기본 true, 확인차 명시
      
  # Jackson 설정
  jackson:
    serialization:
      write-dates-as-timestamps: false
    time-zone: UTC
      
  # PostgreSQL 설정 (로컬 개발용)
  datasource:
    url: jdbc:postgresql://localhost:5431/c2c  # 5431 → 5432 변경 (표준 포트)
    username: c2c
    password: c2c123
    driver-class-name: org.postgresql.Driver
  
  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: create-drop # 개발용, 운영시 validate 사용
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  
  # Redis 설정 (로컬 개발용)
  data:
    redis:
      host: localhost  # redis → localhost 변경 (로컬 개발용)
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # 캐싱 설정
  cache:
    type: redis
    redis:
      time-to-live: 3600000 # 1시간

# C2C 비즈니스 설정 (명세서 기준)
c2c:
  # Redis 설정
  redis:
    url: redis://localhost:6379
  
  # 하트비트 설정
  heartbeat:
    interval-ms: ${HEARTBEAT_INTERVAL_MS:10000}    # 10초 간격
    presence-ttl-sec: ${PRESENCE_TTL_SEC:30}       # 30초 타임아웃
  
  # 방 설정
  room:
    idle-ttl-sec: ${ROOM_IDLE_TTL_SEC:300}         # 5분 TTL
    max-members: ${MAX_ROOM_MEMBERS:10}            # 최대 멤버 수
  
  # 메시지 설정
  message:
    rate-limit-per-sec: ${RATE_LIMIT_MSG_PER_SEC:5} # 초당 5회 제한
    max-size-bytes: ${MAX_MSG_SIZE:2048}             # 2KB 제한
  
  # WebSocket 설정
  websocket:
    allowed-origins: ${WS_ALLOWED_ORIGINS:*}       # CORS 허용 도메인
    buffer-size: ${WS_BUFFER_SIZE:8192}            # 8KB 버퍼

# 로깅 설정
logging:
  level:
    com.c2c.c2c: INFO
    org.springframework.data.redis: INFO
    org.springframework.web.socket: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    # Chrome DevTools 관련 정적 리소스 요청 무시
    org.springframework.web.servlet.resource.ResourceHttpRequestHandler: WARN
    org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver: ERROR
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# 액츄에이터 설정 (모니터링)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      simple:
        enabled: true

---
# 운영 환경 설정
spring:
  config:
    activate:
      on-profile: prod

  # 운영용 JPA 설정
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false

# 운영용 로깅
logging:
  level:
    com.c2c.c2c: INFO
    org.springframework.data.redis: WARN
    org.springframework.web.socket: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  file:
    name: /logs/c2c.log

# C2C 운영 설정
c2c:
  websocket:
    allowed-origins: ${WS_ALLOWED_ORIGINS:https://yourdomain.com}

---
# 테스트 환경 설정
spring:
  config:
    activate:
      on-profile: test

  # 테스트용 H2 인메모리 DB
  datasource:
    url: jdbc:h2:mem:testdb
    username: sa
    password: 
    driver-class-name: org.h2.Driver
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect

  # 테스트용 Redis (Embedded 또는 Testcontainers 사용)
  data:
    redis:
      host: localhost
      port: 6379

# 테스트용 C2C 설정 (빠른 타임아웃)
c2c:
  redis:
    url: redis://localhost:6379
  heartbeat:
    interval-ms: 1000
    presence-ttl-sec: 5
  room:
    idle-ttl-sec: 60
  message:
    rate-limit-per-sec: 10
