
C2C (Cup2Cup) - Product Concept + MVP Server Guide + Client UX Brief (v1.0, 2025-08-25, Asia/Seoul)
===================================================================================================

본 문서는 Claude 등 클라이언트/서버 구현 담당에게 전달하는 **단일 지시서**입니다.
- 목표: 가장 단순한 **MVP**를 빠르게 띄우고, 이후 **측정 기반**으로 개선
- 구성: (A) 컨셉/브랜드 (B) 기획 요약 (C) MVP 서버 가이드 (D) 확장 고려 요구사항 (E) 클라이언트 UX 브리프

--------------------------------------------------------------------------------
A) 컨셉 / 브랜드
--------------------------------------------------------------------------------
1. 컨셉
- 종이컵 전화기에서 영감받은 **장거리 귓속말**. 
- 메시지는 저장하지 않고, 상대가 받으면 **소멸**(비영속). 
- 부담 없이 열고 닫는 **가벼운 일회성 대화**.

2. 톤 & 보이스
- 가볍고 다정하지만 군더더기 없는 문장. 
- "밀어 넣지 않는 친절함"—과한 감탄/수사는 지양, 짧고 명확한 문장. 
- 버튼/토스트 문구도 담백하게: “보냈어요”, “연결됨”, “재연결 중…”, “삭제됨”.

3. 컬러 & 비주얼
- 메인 컬러: **옅은 버건디**(Light Burgundy).
  - Primary: #B76E79 (light burgundy) 
  - Darker Accent: #8E4A53 
  - Soft Background: #F8F3F4 
  - Ink(본문): #1E1E1E 
  - Success: #2E7D32 / Warning: #F57C00 / Danger: #C62828
- 대비(AA 이상) 확보: 본문 대비비율 4.5:1 이상 권장. 
- 아이콘은 라인 기반, 둥근 모서리(8~16px radius), 미세한 그림자(blur 8, opacity 10~15%).

4. 레이아웃 & 상호작용
- 단일 화면 우선(모바일 1단): 
  - 상단: 방 정보/초대/남은 시간(빈 방 TTL 안내) 
  - 중단: 메시지 타임라인(최근이 하단)
  - 하단: 입력창 + 보내기
- 마이크로 인터랙션: 전송 시 미세한 scale‑in(0.97→1.0, 120ms), 토스트 2초 자동 사라짐.
- 로딩/재연결: 상단 얇은 progress bar(Linear, 2px).

5. 타이포 & 모션
- 폰트: Pretendard/Inter/Roboto 중 하나, 14~16pt 본문, 18~20pt 섹션 제목.
- 모션 가이드: 120–200ms, easing 'standard' (ease-out 0.2, ease-in 0.1). 지나치게 요란한 애니메이션 금지.

--------------------------------------------------------------------------------
B) 기획 요약
--------------------------------------------------------------------------------
1. 핵심 가치
- **익명성/가벼움/사라짐**: 기록이 남지 않는 솔직한 대화. 
- **즉시성**: 초대 링크 → 바로 입장 → 짧은 대화 → 종료.

2. 사용 흐름(최단)
- 링크 열기 → 닉네임/이모지 선택(옵션) → **접속** → 대화 → 탭 닫으면 종료.
- 누군가 방에 **한 명이라도 남아있으면** 방은 유지. 아무도 없으면 5분 후 삭제.

3. 정책(요지)
- 메시지 본문은 서버에 저장하지 않음(비영속). 
- 빈 방: 마지막 퇴장 시점부터 **5분 지연 삭제**(재입장 허용).
- 악용 방지: 메시지 2KB 제한, 초당 5회 전송 제한(향후 조정).

--------------------------------------------------------------------------------
C) MVP 서버 가이드(최소 구성)
--------------------------------------------------------------------------------
1. 인프라(최소)
- **WebSocket 서버 1개 + Redis 1개**
- LB/모니터링 도입 전제 없음.

2. Redis 키(최소)
- `room:{roomId}:members` (Set) — 방 참여자
- `user:{userId}:presence` (String, TTL=30s) — 온라인 표시
- `chan:{roomId}` (Pub/Sub) — 메시지 팬아웃

3. 방 수명주기
- 입장: `SADD room:{id}:members {uid}`
- 퇴장/끊김: `SREM room:{id}:members {uid}`
- **마지막 1인 퇴장 시**: `EXPIRE room:{id}:members 300`(5분)
- 5분 내 재입장 시: `PERSIST room:{id}:members`

4. 프레즌스 & 하트비트
- 클라→서버: 10초 간격 `ping`
- 서버→클라: `pong`
- Redis: `SETEX user:{uid}:presence 30 online`
- 30초 미수신 시 오프라인 처리/연결 종료.

5. 메시지 흐름
- 송신: 클라 → 서버 → `PUBLISH chan:{roomId} payload`
- 수신: 서버가 해당 `chan:{roomId}` 구독 → 같은 방 로컬 소켓에게 팬아웃
- ACK/Streams/Kafka 미도입(MVP에서는 단순화).

6. 구성(도커 예시)
- Redis: `redis:7.2` / AOF,SAVE OFF(개발 초반 비영속)
- WS: `ghcr.io/yourorg/c2c-ws:latest`

7. 환경변수(최소)
- `REDIS_URL=redis://redis:6379`
- `HEARTBEAT_INTERVAL_MS=10000`
- `PRESENCE_TTL_SEC=30`
- `ROOM_IDLE_TTL_SEC=300`
- `RATE_LIMIT_MSG_PER_SEC=5`
- `MAX_MSG_SIZE=2048`
- `NODE_ID=ws-1`

8. 서버‑클라 프로토콜(JSON)
- `join` : `{"t":"join","roomId":"...","token":"..."}`
- `joined`: `{"t":"joined","roomId":"...","me":"...","members":[...]}`
- `msg` : `{"t":"msg","roomId":"...","text":"..."}`
- `msg(server→client)`: `{"t":"msg","roomId":"...","from":"...","text":"..."}`
- `ping/pong`: `{"t":"ping"}` / `{"t":"pong"}`

9. 예외처리
- Exeptionhandler를 통해 일관적으로 처리.
- 상황별 에러 코드와 메시지는 db에서 관리.

10. rdbms
- Postgresql사용할것.
- docker-compose로 함께 띄울것.
--------------------------------------------------------------------------------
D) 확장 고려 요구사항(지금 반영, 비용 낮음)
--------------------------------------------------------------------------------
1. 브로커 추상화(인터페이스) — 나중에 **Redis Streams/Kafka 교체 가능**
- `BROKER_IMPL=redis-pubsub|redis-streams|kafka` 토글만으로 교체.
- Envelope 스키마 고정: `{ v, msgId, clientMsgId, roomId, from, ts, headers, payload }`
- Streams/Kafka 모드에서만 ACK/재전송 사용.

2. 저장소 추상화
- 프레즌스/방 저장은 `PresenceStore`, `RoomRepository` 인터페이스 뒤에 두고 현재는 Redis 구현.
- 키는 추후 클러스터 대응 위해 `{room:ID}` 등 해시태그 포함 설계 권장.

3. 운영 노브
- `ROOM_IDLE_TTL_SEC`, `HEARTBEAT_INTERVAL_MS`, `RATE_LIMIT_MSG_PER_SEC`, `MAX_MSG_SIZE`는 런타임에서 조정 가능(재배포 불필요)하도록 구성.

4. Graceful Shutdown(최소)
- 신규 연결 차단 → 2초 내 in‑flight 전송 마무리 → 구독 해제/세션 종료.

--------------------------------------------------------------------------------
E) 클라이언트 UX 브리프
--------------------------------------------------------------------------------
1. 화면 구조(모바일 1단 기준)
- 헤더: 방 이름/남은 시간(빈 방 TTL 카운트다운)/초대 버튼
- 메시지 타임라인: 말풍선 좌우 정렬(자기/상대), 시간은 메시지 아래 11px 휴먼 읽기 표기
- 입력 바: placeholder “귓속말을 보낼까요…”, 보내기 버튼(옅은 버건디 Fill)

2. 상태/피드백
- 연결됨/재연결 중/끊김을 상단 바와 토스트로 표시
- 빈 방 TTL 진입 시: “지금 나가면 5분 후 방이 없어져요” 안내
- 초과 입력/초당 전송 제한 시 경고 토스트(간결한 문구)

3. 접근성
- 대비 AA 이상, 포커스 링 표시, 키보드 사용성 보장
- 모션 최소화 옵션(설정에서 reduce motion) 고려

4. 마이크로카피 예시
- 전송: “보냈어요” / 재전송: “다시 보내는 중…”
- 재연결: “연결을 다시 붙이는 중입니다”
- 방 삭제: “방이 정리되었어요”

5. 색/컴포넌트 토큰(디자인 토큰 예시)
- `--color-primary: #B76E79`
- `--color-primary-700: #8E4A53`
- `--color-bg-soft: #F8F3F4`
- `--color-text: #1E1E1E`
- Button: radius 12, height 44, shadow 0 4 12 rgba(0,0,0,0.08)

끝.
